trace$timePhoto [tmp] <- p
} else {
# on rajoute un pt
tmp2 <- length (trace$timePhoto)+1
trace <- rbind(trace , trace[tmp,])
trace$timePhoto [tmp2] <- p
}
# pour éviter que la photo soit reprise, on supprime la photo
photoMetaBoucle <- photoMetaBoucle [-tmp,]
}
length(trace$timePhoto[!is.na(trace$timePhoto)])
joint <- merge(trace [, c("time", "name", "timePhoto")], photoMeta, by.x = "timePhoto", by.y="heureAjustee")
names(trace)
names(photoMeta)
setdiff(photoMeta$name, joint$name)
table(trace$name)
png(paste0(chemin_img, "jointurePhotoGPS.png"))
mf_init(joint)
mapview(trace)
mf_map(joint, add =T)
mf_layout("Photo et GPS", "trace GPS/Mars 2025")
dev.off()
names(joint)
st_write(joint[, c("name", "FileModifyDate", "heure")],
"C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg",
"photo_MAR2025",
delete_layer = TRUE)
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$name, group = "photos", width = 200)
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
i <- 1
for (i in  c(1:length(photoMeta$FileModifyDate))){
nom <- photoMeta$FileName[i]
img <- image_read(photoMeta$SourceFile[i], density = NULL, depth = NULL, strip = FALSE)
img2 <- image_scale(img, geometry = "200")
image_write(img2, path = paste0(cheminPhoto, nom), format = NULL, quality = NULL,
depth = NULL, density = NULL, comment = NULL, flatten = FALSE)
photoMeta$nom[i] <- paste0(cheminPhoto, nom)
}
trace <- trace[order(trace$time), ]
trace [1, c("name", "time")]
trace$time
photoMeta [1,]
photoMeta$heure [1] - trace$time [1]
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
data$nom
i <- 1
for (i in  c(1:length(photoMeta$FileModifyDate))){
nom <- photoMeta$FileName[i]
img <- image_read(photoMeta$SourceFile[i], density = NULL, depth = NULL, strip = FALSE)
img2 <- image_scale(img, geometry = "200")
image_write(img2, path = paste0(cheminPhoto, nom), format = NULL, quality = NULL,
depth = NULL, density = NULL, comment = NULL, flatten = FALSE)
photoMeta$nom[i] <- paste0(cheminPhoto, nom)
}
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
names(joint)
st_write(joint[, c("name","nom", "FileModifyDate", "heure")],
"C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg",
"photo_MAR2025",
delete_layer = TRUE)
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
table(duplicated(data$geom))
data <- st_jitter(data)
mf_map(data)
st_write(data, "C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025", delete_layer = TRUE)
zone <- st_read("data/zone.gpkg")
mapview(zone)
zone <- st_transform(zone, 2154)
lasf <- dir("data/gros", "*.laz")
for (f in lasf) {
las <- readLAS(paste0("data/gros/",f), select = "xyz")
sel <- clip_roi(las, zone)
writeLAS(sel, paste0( "data/",f,".las"))
}
lasf <- dir("data/", "*.las")
sel <- readLAS(paste0("data/", lasf [1]))
sel1 <- readLAS(paste0("data/", lasf [2]))
tot <- rbind(sel, sel1)
writeLAS(tot, "data/gros/tot.las")
tot <- readLAS("data/gros/tot.las")
# tous les points
df <- payload(tot)
table(df$Classification)
library(ggplot2)
ggplot(payload(tot), aes(X,Z, color = Z)) +
geom_point(size = 0.5) +
coord_equal() +
theme_minimal() +
scale_color_gradientn(colours = height.colors(50))
ggplot(payload(tot), aes(X,Z, color = Z)) +
geom_point(size = 0.5) +
coord_equal() +
theme_minimal() +
scale_color_gradientn(colours = height.colors(50))
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
library(ggplot2)
ggplot(payload(tot), aes(X,Z, color = Z)) +
geom_point(size = 0.5) +
coord_equal() +
theme_minimal() +
scale_color_gradientn(colours = height.colors(50))
tot <- readLAS("data/gros/tot.las")
plot(tot, bg="white")
rglwidget()
tot <- readLAS("data/gros/tot.las")
plot(tot, bg="white")
rglwidget()
tot <- readLAS("data/gros/tot.las")
library(terra)
chm <- rasterize_canopy(tot, res=1, p2r())
plot (chm)
f <- function (x) { x * 0.05 + 2}
ws_args <- list(x ="Z")
ml <- locate_trees(tot, lmf(hmin = 12, f, ws_args = ws_args, shape = "circular"))
plot(chm)
f <- function (x) { x * 0.05 + 2}
ws_args <- list(x ="Z")
ml <- locate_trees(tot, lmf(hmin = 12, f, ws_args = ws_args, shape = "circular"))
plot(chm)
f <- function (x) { x * 0.05 + 2}
ws_args <- list(x ="Z")
ml <- locate_trees(tot, lmf(hmin = 12, f, ws_args = ws_args, shape = "circular"))
plot(chm)
plot(ml$geometry, add = T)
f <- function (x) { x * 0.05 + 2}
ws_args <- list(x ="Z")
ml <- locate_trees(tot, lmf(hmin = 12, f, ws_args = ws_args, shape = "circular"))
plot(chm)
library(terra)
library(terra)
tot <- readLAS("data/gros/tot.las")
chm <- rasterize_canopy(tot, res=1, p2r())
plot (chm)
writeRaster(chm, "data/chm.tif", overwrite=TRUE)
library(terra)
tot <- readLAS("data/gros/tot.las")
chm <- rasterize_canopy(tot, res=1, p2r())
plot (chm)
writeRaster(chm, "data/chm.tif", overwrite=TRUE)
library(raster)
library(stars)
tot <- readLAS("data/gros/tot.las")
plot(tot, bg="white")
rglwidget()
tot <- readLAS("data/gros/tot.las")
library(terra)
chm <- rasterize_canopy(tot, res=1, p2r())
plot (chm)
tot <- readLAS("data/gros/tot.las")
tot <- readLAS("data/gros/tot.las")
chm <- rasterize_canopy(tot, res=1, p2r())
plot (chm)
writeRaster(chm, "data/chm.tif", overwrite=TRUE)
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
data <- st_jitter(data)
mf_map(data)
st_write(data, "C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025", delete_layer = TRUE)
data <- st_read("C:/Users/aluisribeiro/10_photosGPS/data/arbres2025.gpkg", "photo_MAR2025")
data <- st_transform(data, crs = 4326)
data$name <- rownames(data)
# Créer la carte avec des cercles bleus (#265DAB)
leaflet(data) %>%
addProviderTiles("OpenStreetMap.France") %>%
addCircleMarkers(
label = ~nom,
group = "photos",
radius = 4,        # Taille du cercle
color = "#265DAB",  # Contour bleu
fill = TRUE,
fillColor = "#265DAB",  # Remplissage bleu
fillOpacity = 1       # Opacité maximale
) %>%
addPopupImages(data$nom, group = "photos", width = 200)
zone <- st_read("data/zone.gpkg")
mapview(zone)
zone <- st_transform(zone, 2154)
lasf <- dir("data/gros", "*.laz")
for (f in lasf) {
las <- readLAS(paste0("data/gros/",f), select = "xyz")
sel <- clip_roi(las, zone)
writeLAS(sel, paste0( "data/",f,".las"))
}
lasf <- dir("data/", "*.las")
sel <- readLAS(paste0("data/", lasf [1]))
sel1 <- readLAS(paste0("data/", lasf [2]))
tot <- rbind(sel, sel1)
writeLAS(tot, "data/gros/tot.las")
tot <- readLAS("data/gros/tot.las")
# tous les points
df <- payload(tot)
table(df$Classification)
library(ggplot2)
ggplot(payload(tot), aes(X,Z, color = Z)) +
geom_point(size = 0.5) +
coord_equal() +
theme_minimal() +
scale_color_gradientn(colours = height.colors(50))
library(ggplot2)
ggplot(payload(tot), aes(X,Z, color = Z)) +
geom_point(size = 0.5) +
coord_equal() +
theme_minimal() +
scale_color_gradientn(colours = height.colors(50))
tot <- readLAS("data/gros/tot.las")
plot(tot, bg="white")
rglwidget()
tot <- readLAS("data/gros/tot.las")
plot(tot, bg="white")
rglwidget()
tot <- readLAS("data/gros/tot.las")
library(terra)
chm <- rasterize_canopy(tot, res=1, p2r())
plot (chm)
tot <- readLAS("data/gros/tot.las")
library(terra)
chm <- rasterize_canopy(tot, res=1, p2r())
plot (chm)
f <- function (x) { x * 0.05 + 2}
ws_args <- list(x ="Z")
ml <- locate_trees(tot, lmf(hmin = 12, f, ws_args = ws_args, shape = "circular"))
plot(chm)
tot <- readLAS("data/gros/tot.las")
chm <- rasterize_canopy(tot, res=1, p2r())
ml <- locate_trees(tot, lmf(ws = 7))
plot(chm)
x <- plot(tot, bf="white", size = 4)
add_treetops3d(x, ml)
rglwidget()
library(dplyr)
#library(ggplot2)
library(leaflet)
library(leafpop)
#library(lubridate)
#library(purrr)
#library(readr)
library(sf)
library(mapsf)
#library(tibble)
library(ggplot2)
library(leaflet)
library(leafpop)
library(lubridate)
library(purrr)
library(readr)
library(mapsf)
library(tibble)
library(tidyr)
library(exiftoolr) # metadonnées photo
library(magick) # pour la taille
library(mapview)
library(ggthemes)
library(lidR)
library(rgl)
library(terra)
zone <- st_read("data/zone.gpkg")
mapview(zone)
zone <- st_transform(zone, 2154)
lasf <- dir("data/gros", "*.laz")
for (f in lasf) {
las <- readLAS(paste0("data/gros/",f), select = "xyz")
sel <- clip_roi(las, zone)
writeLAS(sel, paste0( "data/",f,".las"))
}
lasf <- dir("data/", "*.las")
sel <- readLAS(paste0("data/", lasf [1]))
sel1 <- readLAS(paste0("data/", lasf [2]))
tot <- rbind(sel, sel1)
writeLAS(tot, "data/gros/tot.las")
tot <- readLAS("data/gros/tot.las")
# tous les points
df <- payload(tot)
table(df$Classification)
library(ggplot2)
ggplot(payload(tot), aes(X,Z, color = Z)) +
geom_point(size = 0.5) +
coord_equal() +
theme_minimal() +
scale_color_gradientn(colours = height.colors(50))
tot <- readLAS("data/gros/tot.las")
plot(tot, bg="white")
rglwidget()
library(htmlwidgets)
widget <- rglwidget()
saveWidget(widget, file = "Lidar.html")
tot <- readLAS("data/gros/tot.las")
# tous les points
df <- payload(tot)
table(df$Classification)
tot <- readLAS("data/gros/tot.las")
plot(tot, bg="white")
rglwidget()
```
widget <- rglwidget()
saveWidget(widget, file = "Lidar.html")
library(dplyr)
#library(ggplot2)
library(leaflet)
library(leafpop)
#library(lubridate)
#library(purrr)
#library(readr)
library(sf)
library(mapsf)
#library(tibble)
library(ggplot2)
library(leaflet)
library(leafpop)
library(lubridate)
library(purrr)
library(readr)
library(mapsf)
library(tibble)
library(tidyr)
library(exiftoolr) # metadonnées photo
library(magick) # pour la taille
library(mapview)
library(ggthemes)
library(lidR)
library(rgl)
library(terra)
library(htmlwidgets)
zone <- st_read("data/zone.gpkg")
mapview(zone)
zone <- st_transform(zone, 2154)
lasf <- dir("data/gros", "*.laz")
for (f in lasf) {
las <- readLAS(paste0("data/gros/",f), select = "xyz")
sel <- clip_roi(las, zone)
writeLAS(sel, paste0( "data/",f,".las"))
}
lasf <- dir("data/", "*.las")
sel <- readLAS(paste0("data/", lasf [1]))
sel1 <- readLAS(paste0("data/", lasf [2]))
tot <- rbind(sel, sel1)
writeLAS(tot, "data/gros/tot.las")
tot <- readLAS("data/gros/tot.las")
# tous les points
df <- payload(tot)
table(df$Classification)
tot <- readLAS("data/gros/tot.las")
plot(tot, bg="white")
rglwidget()
tot <- readLAS("data/gros/tot.las")
chm <- rasterize_canopy(tot, res=1, p2r())
plot (chm)
